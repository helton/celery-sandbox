[tool.poetry]
name = "y"
version = "0.1.0"
description = ""
authors = ["Helton Carlos de Souza <heltoncarlossouza@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.9.2"
ulid = "^1.1"

[tool.poetry.group.worker.dependencies]
celery = {version = "5.5.0rc1", extras = ["dynamodb", "redis"]}
flower = "^2.0.1"
httpx = "^0.27.2"
gevent = "^24.10.3"

[tool.poetry.group.api.dependencies]
fastapi = "^0.115.2"
uvicorn = "^0.32.0"

[tool.poetry.group.dev.dependencies]
taskipy = "^1.13.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.taskipy.tasks]
requirements = """
  poetry export --without-hashes --format=requirements.txt --with=worker > app/workers/requirements.txt && \
  poetry export --without-hashes --format=requirements.txt --with=api    > app/api/requirements.txt
"""
docker_infra = """
  cd local && \
  docker compose --profile infra up --build -d
"""
docker_celery = """
  cd local && \
  docker compose --profile celery up --build --scale worker=2 -d
"""
docker_api = """
  cd local && \
  docker compose --profile api up --build --scale worker=2 -d
"""
docker_all = """
  cd local && \
  docker compose --profile infra --profile celery --profile api up --build --scale worker=2 -d
"""
docker_down="""
  cd local
  docker compose --profile infra --profile celery --profile api down -v --remove-orphans
  cd ..

  rm -rf local/localstack/data
  rm -rf local/redis/data
  rm -rf local/redis-insight/data
  rm -rf local/terraform/.terraform local/terraform/.terraform.lock.hcl local/terraform/terraform.tfstate local/terraform/terraform.tfstate.backup
  
  mkdir -p local/localstack/data
  mkdir -p local/redis/data
  mkdir -p local/redis-insight/data
  mkdir -p local/terraform/.terraform
"""
terraform = """
  cd local && \
  docker compose run --rm -it terraform "terraform apply -auto-approve"
"""
worker = """
  cd app
  export $(grep -v '^#' $(pwd)/.env | grep -v '^$' | xargs)
  celery --app=workers.tasks.app worker --pool=prefork --loglevel=INFO
"""
api = """
  cd app
  export $(grep -v '^#' $(pwd)/.env | grep -v '^$' | xargs)
  uvicorn api.main:app --port 8080
"""
client = """
  executions=1

  run_uuid=$(uuidgen | tr '[:upper:]' '[:lower:]')
  run_dir="$(pwd)/.runs"
  mkdir -p "$run_dir"
  output_file="$run_dir/${run_uuid}.txt"

  {
    echo "[Run $run_uuid]"
    echo "Running $executions workflow(s)...\n"
  } | tee -a "$output_file"

  cd app
  export $(grep -v '^#' $(pwd)/.env | grep -v '^$' | xargs)
  
  start_time=$(date +%s.%N)
  TMP_DIR=$(mktemp -d)

  run_execution() {
      local exec_num=$1
      local exec_output_file="$TMP_DIR/output_$exec_num.txt"
      {
          echo "Execution $exec_num"
          printf '========================================\n'
          python -m client.client
      } > "$exec_output_file" 2>&1
  }

  for ((i=1; i<=executions; i++)); do
      run_execution "$i" &
  done

  wait

  success_count=0
  fail_count=0
  timeout_count=0

  for ((i=1; i<=executions; i++)); do
      output=$(cat "$TMP_DIR/output_$i.txt")
      if echo "$output" | grep -q "✅ Workflow"; then
          success_count=$((success_count + 1))
      elif echo "$output" | grep -q "❌ Workflow"; then
          fail_count=$((fail_count + 1))
      elif echo "$output" | grep -q "⏰ Workflow"; then
          timeout_count=$((timeout_count + 1))
      fi
      cat "$TMP_DIR/output_$i.txt"
      cat "$TMP_DIR/output_$i.txt" >> "$output_file"
      echo >> "$output_file"
  done

  rm -r "$TMP_DIR"

  end_time=$(date +%s.%N)
  elapsed=$(awk -v start="$start_time" -v end="$end_time" 'BEGIN { printf "%.2f", end - start }')

  {
    echo "[Summary]"
    echo "Pool:            $WORKER_POOL"
    echo "Concurrency:     $WORKER_CONCURRENCY"
    echo "ID:              $run_uuid"
    echo "Elapsed time:    ${elapsed} seconds"
    echo "Total:           ${executions}"
    echo "  ✅ Success:    ${success_count}"
    echo "  ❌ Failures:   ${fail_count}"
    echo "  ⏰ Timeouts:   ${timeout_count}"
  } | tee -a "$output_file"
"""
go="""
  task docker_down
  task docker_all
  sleep 30
  task client
"""
